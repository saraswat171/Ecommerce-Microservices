openapi: "3.0.0"
info:
  title: Auth-e-Commenrce

  version: "1.0.0"
  description: User database .
servers:
  - url: http://localhost:8080
paths:
  /signup:
    post:
      tags:
      - "Auth"
   
      summary: Create a new user
      description: Creates a new user 
      requestBody:
        description: Request to create user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
               type: object
               properties:
                 message:
                  type: string
                  example: Success
               
        '409':
            description: Duplicate key error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: The provided email already exists
      
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '400':
         description: Fields are required

  /signin:
    post:
      tags:
        - Auth
      summary: Get user login
      description: Returns user details and token
      requestBody:
        description: Request to login user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserloginRequest'
        required: true
      responses:
        '200':
          description: User logged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
        
        '404':
          description: 'Not Found:  This response is shown if the request for information is not there or it could not be imported'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User Not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
        '400':
         description:  Invalid or incorrect credential
    
  /profile/:id:
    put:
      tags:
       - "User"
      summary: Update User Profile
      description: Update user data 
      parameters:
        - name: 'id'
          in: path
          required: true
          description: The ID of User
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request to edit advisor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserSchema'
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
               
                  $ref: '#/components/schemas/EditUserSchema'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userId is not valid, 1234 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string




 
          
components:
  schemas:
    UserSchema:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
       
        email:
          type: string
          format: email
        password:
          type: string
        phone:
         type: number
      
        image:
         type: string
        role:
         type: string
         format: enum
        address:
         type: object
         properties:
           street:
            type: string
           state:
            type: string
           city:
            type: string
           pincode:
            type: number
           country:
            type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2023-07-25T08:30:00Z"
      
  


        
  
      
    

    
   

    EditUserSchema:
      type: object
      properties:            
        name:
          type: string             
        phone:
         type: number
        
        image:
         type: string
      
        role:
         type: string
         format: enum
       
        address:
         type: object
         properties:
           street:
            type: string
           state:
            type: string
           city:
            type: string
           pincode:
            type: number
           country:
            type: string

            
       

      
    UserRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        email:
          type: string
          format: email
      
      required:
        - name
        - email
        - password

    UserloginRequest:
      type: object
      properties:
    
        password:
          type: string
        email:
          type: string
          format: email
      
      required:
        
        - email
        - password   